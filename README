=================================
README for IEGenLib
=================================
IEGenLib is a library that represents and manipulates integer sets and
relations that have affine and uninterpreted function constraints.

Contents of this README:

I.   Getting The Source Code
II.  Quick Start
        A. Building IEGenLib
        B. Replicating relation simplification result from the SC 2016 paper
        C. Using the IEGenLib Python bindings
III. Distribution Organization
IV.  Building IEGenLib from Source
V.   Running Tests
VI.  Documentation
VII. Contact


====  I. Getting The Source Code ===================

The IEGenLib library is being actively developed, and new functionalities
are being added. You can get the latest source code from this git repository:

    git clone https://github.com/CompOpt4Apps/IEGenLib


==== II. Quick Start ===============

  A. Building IEGenLib
  B. Simplifying constraints set containing Uninterpreted Function Calls
  C. Using the IEGenLib Python Interface

---- A. Building IEGenLib ----------

If you want to do a quick build, just run:
    ./configure
    make
    make test
 
If you want to do a quick build and install with python binding enabled, run:

    ./configure --build-python
    make
    make test
    make install

This will install into a directory IEGenLib/iegenlib
Set IEGEN_HOME to /full/path/to/IEGenLib/iegen

Please note there are requirements for python binding. These requirements and 
choosing an alternative installation directory is covered in the section IV.


---- B. Replicating relation simplification result from the SC 2016 paper ---

After building IEGenLib using above commands, 
compile the simplifyDriver.c using following command:

    g++ -o simplifyDriver simplifyDriver.cc -I src build/src/libiegenlib.a -lisl -std=c++11

Then, to produce the simplified dependence relations of 
Gauss-Seidel and Incomplete LU examples discussed in the paper, 
use following command:

   ./simplifyDriver gs_csr.json ilu_csr.json

Note that dependence relations (along with the reference codes) 
are inside two json files seen in the command above. 
For a detail description read rest of this section and 
comments in the simplifyDriver.cc. 


The paper:

Anand Venkat, Mahdi Soltan Mohammadi, Hongbo Rong, Rajkishore Barik,
Jongsoo Park, Michelle Mills Strout and Mary Hall, 
"Automating Wavefront Parallelization for Sparse Matrix Computations,"
in Proceedings of the International Conference for High Performance Computing,
Networking, Storage and Analysis (SC16), Salt Lack City, Utah, 2016.

LINK TO THE PAPER: You could have free access to the paper
using the publication link from author's publication webpage:

http://cgi.cs.arizona.edu/~mstrout/Papers/pubs-main.php

presents a simplification algorithm for simplifying non-affine sets of 
constraints that contain uninterpreted function symbols (UFSs).
These sets can represent non-affine relations that result from 
data dependence analysis of sparse matrix computation. The simplified sets
can be used for generating efficient inspectors in Inspector/Executor strategy.
Here, we explain how users could access and replicate the example relations
and simplifications that were carried out in the paper. 

There are two code examples discussed in the paper that from each,
we can extract more than one dependence relations.
The code examples and the pertaining relations can be found in
two json files: gs_csr.json, and ilu_csr.json, located in the home 
directory of IEGenLib just next to this README file. Files respectively
correspond to Gauss-Seidel and Incomplete LU factorization codes
discussed in the paper. The json files are self explanatory about
how you can specify required inputs and outputs.

Before even looking at the input json files you can look at simplifyDriver.cc.
This driver, which is located in the same directory as this README,
explains how to use simplification functionality in IEGenLib to 
simplify such non-affine sets that are placed into input json files.

After building IEGenLib library, simplification functionality can be used
outside IEGenLib independently or get integrated into other libraries.
The driver, simplifyDriver.cc, is an example of this.
You can also have a look at the main test case for the functionality that is
located in the chillusage_test. There are also various test cases for 
sub-functionalities pertaining to simplification in the test cases.



==== III. Distribution Organization ===============

The distribution is shipped as a tar file. When you unpack the tar
file it creates a directory that is the root of the distribution.

    tar xzvf iegenlib-#.#.#.tgz

Sources for the project are found in the distribution root src/
sub-directory.

The library and demonstration driver create both string and dot
output; graphviz is needed to visualize the dot output.
      

==== IV. Building IEGenLib from Source =======================

    Build Command Sequence without python bindings
        ./configure
        make
        make install

    Build and Test without creating an install directory
        ./configure
        make
        make test
       

    Required to use Python bindings to IEGenLib:
        * Python 2.7.2 known to work on linux and Mac

    Requirements
        * cmake 2.6 or newer
        
        * C++ compiler, the below versions are known to work
            Mac i686-apple-darwin10-g++-4.2.1, 
            GCC 4.6.3 20120306 (Red Hat 4.6.3-2)
            
        * If re-generating parser files BISON 2.4 and FLEX 2.5 or newer
        
        * If re-generating docs
            * doxygen (http://www.stack.nl/~dimitri/doxygen/index.html,
                       known to work with 1.5.6 and 1.7.5)
            * dot (http://www.graphviz.org)

        * If rebuilding python bindings from source: 
            * swig version 2.0.4 for linux, version 1.3.40 for Mac known to work
            ** please note: if installing swig from macports 2 packages 
               are required: swig and swig-python
 
        * If you plan to change the grammar for the sets or relations:
            * Flex: version 2.5.35 known to work
            * Bison: version 2.4.1 known to work

Please notify us if you find that other versions of these tools that
work or do not work for you.

Build files for the project are generated using cmake (except for the
distribution root-level Makefile that is included in the tar file).
Cmake version 2.6 or newer is required. Make files can be generated to
only build the binaries, to additionally generate the parser files,
and/or to additionally include Python bindings to the library. These
options are enabled through a configure script in the root of the
project. If the parser option is included, then additionally FLEX
version 2.5 or newer and BISON version 2.4 or newer are required. If
documentation is to be re-generated, then doxygen and dot are also
required to create it.

Run ./configure --help for more build configuration options.

The default install directory is ${IEGEN_DIR}/iegen/. This directory
may be changed using options to the configure script.  Note that the
cmake system places binaries in an iegen/ directory, rather than an
iegen-LINUX64/ or iegen-MacOSX/ directory as are shipped in the
distribution.


==== V. Running Tests =====

The iegen/bin/run_iegenlib_tests binary can be executed to run the tests of 
the various components of IEGenLib. Additionally, from the root of the 
distribution you can run 'make test' to run these same tests.

The gtest framework is used for writing and running unit tests.  Information 
on gtest can be found at:

    http://code.google.com/p/googletest/

and introductory documentation is at:

    http://code.google.com/p/googletest/wiki/V1_6_Primer

==== VI. Documentation =====

To create the doxygen documentation, run the following command:

    make docs

An index.html file will be created in the distribution root directory, in 
doc/html/. A latex pdf file, called refman.pdf will also be created, in the 
doc/latex/ directory. 

==== VII. Debug and Release Builds =====

The default build is the debug build.  It is set by cmake in the configure 
script with -DCMAKE_BUILD_TYPE:STRING=Debug.  The compiler options for the 
debug build are '-O0 -g'.  

To create a release version, use in the -build--release option to the 
configure script. The compiler options for the release are '-O3 -DNDEBUG'.

To show actual build commands, you can run the verbose version of the build:
  
  make install VERBOSE=1

==== VII. Contact =====

For more information please contact:

Dr. Michelle Strout, mstrout@cs.arizona.edu

